#!/usr/bin/env python

from big_ol_pile_of_manim_imports import *

# To watch one of these scenes, run the following:
# python -m manim example_scenes.py Training_set_1 -pl
#
# Use the flat -l for a faster rendering at a lower
# quality.
# Use -s to skip to the end and just save the final frame
# Use the -p to have the animation (or image, if -s was
# used) pop up once done.
# Use -i to save the animation as a gif
# Use -n <number> to skip ahead to the n'th animation of a scene.

class Training_set_1(Scene):
    def construct(self):
        intro = TextMobject("Results using Training set 1")
        box = Rectangle(color = YELLOW, width = 10, height = 5)
        label_BLUE = TextMobject("BLUISH")
        label_BLUE.set_color(DARK_BLUE)
        label_BLUE.next_to(box,0.0002*LEFT)
        label_BLUE.bg=BackgroundRectangle(label_BLUE,fill_opacity=0)
        label_group1=VGroup(label_BLUE.bg,label_BLUE)  #Order matters
        label_group1.rotate(TAU/4)
        label_RED = TextMobject("REDDISH")
        label_RED.next_to(box,0.02*DOWN)
        label_RED.set_color(DARK_RED)
        label_RED.bg=BackgroundRectangle(label_RED,fill_opacity=0)
        label_group2=VGroup(label_RED.bg,label_RED)  #Order matters
        ball1_BLUE = Dot(radius = 0.15, color = DARK_BLUE)
        ball2_BLUE = Dot(radius = 0.15, color = BLUE_D)
        ball3_BLUE = Dot(radius = 0.15, color = BLUE_B)
        ball1_RED= Dot(radius = 0.15, color = DARK_RED)
        ball2_RED= Dot(radius = 0.15, color = RED_D)
        ball3_RED= Dot(radius = 0.15, color = RED_B)
        blue_box = Rectangle(color = BLUE, width = 1.25, height = 1.5)
        red_box = Rectangle(color = RED, width = 1.25, height = 1.5)
        blue_box.move_to(1.6*UP+4.3*LEFT)
        red_box.move_to(1.6*DOWN+4.3*RIGHT)
        perfect = TextMobject("Perfect Clusters!")

        self.add(intro)
        self.wait(1)
        self.play(ApplyMethod(intro.shift,3.5*UP))
        self.play(ApplyMethod(intro.scale,0.75))
        self.wait(0.5)
        self.play(GrowFromCenter(box))
        self.play(FadeIn(label_group1))
        self.wait(0.05)
        self.play(ApplyMethod(label_group1.scale,0.75))
        self.play(FadeIn(label_group2))
        self.wait(0.5)
        self.play(ApplyMethod(label_group2.scale,0.75))
        self.play(FadeIn(ball1_RED))
        self.play(ApplyMethod(ball1_RED.shift,2*DOWN,4.5*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball1_BLUE))
        self.play(ApplyMethod(ball1_BLUE.shift,2*UP,4.5*LEFT))
        self.wait(0.5)
        self.play(FadeIn(ball2_RED))
        self.play(ApplyMethod(ball2_RED.shift,1.5*DOWN,4*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball2_BLUE))
        self.play(ApplyMethod(ball2_BLUE.shift,1.5*UP,4*LEFT))
        self.wait(0.5)
        self.play(FadeIn(ball3_RED))
        self.play(ApplyMethod(ball3_RED.shift,1*DOWN,4.5*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball3_BLUE))
        self.play(ApplyMethod(ball3_BLUE.shift,1*UP,4.5*LEFT))
        self.play(FadeIn(blue_box))
        self.wait(0.5)
        self.play(FadeIn(red_box))
        self.wait(0.5)
        self.add(perfect)
        self.wait(0.5)
        self.play(ApplyMethod(perfect.scale,0.75))
        self.wait(2)

class Training_set_2(Scene):
    def construct(self):
        intro = TextMobject("Results using Training set 2")
        box = Rectangle(color = YELLOW, width = 10, height = 5)
        label_BLUE = TextMobject("BLUISH")
        label_BLUE.set_color(DARK_BLUE)
        label_BLUE.next_to(box,0.0002*LEFT)
        label_BLUE.bg=BackgroundRectangle(label_BLUE,fill_opacity=0)
        label_group1=VGroup(label_BLUE.bg,label_BLUE)  #Order matters
        label_group1.rotate(TAU/4)
        label_RED = TextMobject("REDDISH")
        label_RED.next_to(box,0.02*DOWN)
        label_RED.set_color(DARK_RED)
        label_RED.bg=BackgroundRectangle(label_RED,fill_opacity=0)
        label_group2=VGroup(label_RED.bg,label_RED)  #Order matters
        ball1_BLUE = Dot(radius = 0.15, color = DARK_BLUE)
        ball2_BLUE = Dot(radius = 0.15, color = BLUE_D)
        ball3_BLUE = Dot(radius = 0.15, color = BLUE_B)
        ball1_RED= Dot(radius = 0.15, color = DARK_RED)
        ball2_RED= Dot(radius = 0.15, color = RED_D)
        ball3_RED= Dot(radius = 0.15, color = RED_B)
        blue_box1 = Rectangle(color = DARK_BLUE, width = 0.4, height = 0.4)
        blue_box2 = Rectangle(color = BLUE_D, width = 0.4, height = 0.4)
        blue_box3 = Rectangle(color = BLUE_B, width = 0.4, height = 0.4)
        red_box1 = Rectangle(color = DARK_RED, width = 0.4, height = 0.4)
        red_box2 = Rectangle(color = RED_D, width = 0.4, height = 0.4)
        red_box3 = Rectangle(color = RED_B, width = 0.4, height = 0.4)
        blue_box1.move_to(2*UP+2*LEFT)
        blue_box2.move_to(2*LEFT)
        blue_box3.move_to(2*DOWN+2*LEFT)
        red_box1.move_to(2*DOWN+2*RIGHT)
        red_box2.move_to(2*RIGHT)
        red_box3.move_to(2*UP+2*RIGHT)
        botched = TextMobject("Botched Clusters!",sacle = 0.75)

        self.add(intro)
        self.wait(1)
        self.play(ApplyMethod(intro.shift,3.5*UP))
        self.play(ApplyMethod(intro.scale,0.75))
        self.wait(0.5)
        self.play(GrowFromCenter(box))
        self.play(FadeIn(label_group1))
        self.wait(0.05)
        self.play(ApplyMethod(label_group1.scale,0.75))
        self.play(FadeIn(label_group2))
        self.wait(0.5)
        self.play(ApplyMethod(label_group2.scale,0.75))
        self.play(FadeIn(ball1_RED))
        self.play(ApplyMethod(ball1_RED.shift,2*DOWN,2*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball1_BLUE))
        self.play(ApplyMethod(ball1_BLUE.shift,2*UP,2*LEFT))
        self.wait(0.5)
        self.play(FadeIn(ball2_RED))
        self.play(ApplyMethod(ball2_RED.shift,2*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball2_BLUE))
        self.play(ApplyMethod(ball2_BLUE.shift,2*LEFT))
        self.wait(0.5)
        self.play(FadeIn(ball3_RED))
        self.play(ApplyMethod(ball3_RED.shift,2*UP,2*RIGHT))
        self.wait(0.5)
        self.play(FadeIn(ball3_BLUE))
        self.play(ApplyMethod(ball3_BLUE.shift,2*DOWN,2*LEFT))
        self.play(FadeIn(red_box1))
        self.play(FadeIn(blue_box1))
        self.play(FadeIn(red_box2))
        self.play(FadeIn(blue_box2))
        self.play(FadeIn(red_box3))
        self.play(FadeIn(blue_box3))
        self.wait(0.5)
        self.add(botched)
        self.wait(0.5)
        self.play(ApplyMethod(botched.scale,0.75))
        self.wait(2)
